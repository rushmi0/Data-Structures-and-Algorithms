package structures.LinKedList;


public class SinglyLinkedList {


    /**
     * ประกาศและกำหนดค่าเริ่มต้นของคลาส `LinkedList`
     * ใช้สำหรับประกาศและเก็บโหนดแรก (head) และโหนดสุดท้าย (tail) ของลิงค์ลิสต์และความยาวของลิงค์ลิสต์
     */
    private Node head;   // โหนดแรกของลิงค์ลิสต์
    private Node tail;   // โหนดสุดท้ายของลิงค์ลิสต์
    private int length;  // ความยาวของลิงค์ลิสต์


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // กำหนดคลาส Node ภายในคลาส LinkedList
    class Node {

        /**
         * โหนดของลิงค์ลิสต์ประกอบด้วยสองส่วน คือ ค่าข้อมูลที่เก็บในโหนด (value) และโหนดถัดไปในลิงค์ลิสต์ (next) ซึ้งใช้สำหรับเก็บโหนดถัดไปในลิงค์ลิสต์
         * <p>
         * โดยในคลาส Node จะประกอบด้วย:
         * 1. ตัวแปร value ใช้สำหรับเก็บค่าข้อมูลที่เก็บในโหนด
         * 2. ตัวแปร next ใช้สำหรับเก็บโหนดถัดไปในลิงค์ลิสต์
         */

        int value; // ค่าข้อมูลที่เก็บในโหนด
        Node next; // โหนดถัดไปในลิงค์ลิสต์

        // กำหนดคอนสตรักเตอร์สำหรับคลาส Node ซึ่งรับค่า value เพื่อเก็บในโหนด เพื่อใช้สร้างโหนดใหม่
        public Node(int value) {
            this.value = value;
        }

    }


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // กำหนดคอนสตรักเตอร์สำหรับคลาส LinkedList
    public SinglyLinkedList(int value) {

        /**
         * ในคอนสตรักเตอร์ของคลาส LinkedList จะมีการสร้างโหนดแรกของลิงค์ลิสต์ โดยใช้ค่า value ที่รับเข้ามาเพื่อเก็บในโหนด
         * <p>
         * ในกรณีนี้ การสร้างโหนดแรกของลิงค์ลิสต์จะมีขั้นตอนดังนี้:
         * 1. สร้างโหนดใหม่ (newNode) โดยใช้ค่า value ที่รับเข้ามาเพื่อเก็บในโหนด
         * 2. กำหนดโหนดแรกของลิงค์ลิสต์ (head) ให้เป็นโหนดใหม่ที่สร้างขึ้น
         * 3. กำหนดโหนดสุดท้ายของลิงค์ลิสต์ (tail) ให้เป็นโหนดใหม่ที่สร้างขึ้น
         * 4. กำหนดความยาวของลิงค์ลิสต์ (length) ให้เป็น 1
         * 5. ส่งค่าโหนดแรกของลิงค์ลิสต์ (head) กลับไป
         * */

        Node newNode = new Node(value);
        head = newNode; // กำหนดโหนดแรกในลิงค์ลิสต์เป็น newNode
        tail = newNode; // กำหนดโหนดสุดท้ายในลิงค์ลิสต์เป็น newNode
        length = 1; // กำหนดความยาวของลิงค์ลิสต์เป็น 1
    }


    // ใช้สำหรับแสดงค่าข้อมูลทั้งหมดในลิงค์ลิสต์
    public void printList() {

        // กำหนดตัวแปร currentNode เพื่อใช้เก็บโหนดปัจจุบันที่จะแสดงค่าข้อมูล
        Node currentNode = this.head;

        // เงื่อนไขในการวนลูป คือถ้า currentNode ไม่เท่ากับ null ให้ทำการวนลูปต่อไป
        while (currentNode != null) {

            // กำหนดตัวแปร value เพื่อเก็บค่าข้อมูลที่อยู่ในโหนดปัจจุบัน
            int value = currentNode.value;

            // กำหนดตัวแปร address เพื่อเก็บที่อยู่ของโหนดปัจจุบัน
            String addr = String.valueOf(System.identityHashCode(currentNode));

            // กำหนดตัวแปร nextAddress เพื่อเก็บที่อยู่ของโหนดถัดไปในลิงค์ลิสต์
            String nextAddress = currentNode.next != null ? String.valueOf(System.identityHashCode(currentNode.next)) : "null";

            // แสดงค่าข้อมูลที่อยู่ในโหนดปัจจุบัน
            System.out.print("[value:" + value + "][address:" + addr + "] => [pointer:" + nextAddress + "]");

            // ถ้าโหนดปัจจุบันไม่ใช่โหนดสุดท้ายในลิงค์ลิสต์ ให้แสดงเครื่องหมาย `->` ต่อท้าย
            if (currentNode.next != null) {
                System.out.print(" -> ");
            }

            // กำหนดให้ currentNode เป็นโหนดถัดไปในลิงค์ลิสต์
            currentNode = currentNode.next;
        }
    }

    // ใช้สำหรับแสดงค่าข้อมูลในโหนดแรกของลิงค์ลิสต์
    public void getHead() {
        System.out.println("Head: " + this.head.value);
    }

    // ใช้สำหรับแสดงค่าข้อมูลในโหนดสุดท้ายของลิงค์ลิสต์
    public void getTail() {
        System.out.println("Tail: " + this.tail.value);
    }

    // ใช้สำหรับแสดงความยาวของลิงค์ลิสต
    public void getLength() {
        System.out.println("Length: " + this.length);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // `append` Method นี้มีหน้าที่ใช้สำหรับเพิ่มโหนดใหม่เข้าไปในลิงค์ลิสต์
    public void append(int value) {

        Node newNode = new Node(value);

        // ในกรณีนี้ ถ้าค่า length ของลิงค์ลิสต์เป็น 0 แสดงว่า `Linked List` ยังไม่มีโหนดอยู่เลย จึงจะต้องสร้างโหนดแรกของ `Linked List` ขึ้นมา
        if (length == 0) {

            // กำหนดโหนดแรกในลิงค์ลิสต์เป็นโหนดใหม่ที่สร้างขึ้น
            this.head = newNode;

            // กำหนดโหนดสุดท้ายในลิงค์ลิสต์เป็นโหนดใหม่ที่สร้างขึ้น
            this.tail = newNode;

        } else { // ในกรณีนี้ ถ้าค่า length ของลิงค์ลิสต์มากกว่า 0 แสดงว่าลิงค์ลิสต์มีโหนดอยู่แล้ว จึงจะต้องเพิ่มโหนดใหม่เข้าไปในลิงค์ลิสต์

            // กำหนดให้โหนดถัดไปของโหนดสุดท้ายในลิงค์ลิสต์เป็นโหนดใหม่ที่สร้างขึ้น
            this.tail.next = newNode;

            // กำหนดโหนดสุดท้ายในลิงค์ลิสต์เป็นโหนดใหม่ที่สร้างขึ้น
            this.tail = newNode;

        }

        // เพิ่มค่า length ของลิงค์ลิสต์เพิ่มขึ้น 1
        this.length++;

    }

}
